// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  handle    String?
  createdAt DateTime @default(now())
}

model League {
  id              String          @id @default(cuid())
  espnLeagueId    String          @unique
  season          Int
  name            String
  scoringJson     Json
  rosterRulesJson Json
  auctionBudget   Int?
  firstLoadedAt   DateTime?
  createdBy       String?
  teams           Team[]
  TeamClaim       TeamClaim[]
  tradeProposals  TradeProposal[]
  AuctionPrice    AuctionPrice[]
  Valuation       Valuation[]
}

model Team {
  id                String          @id @default(cuid())
  leagueId          String
  league            League          @relation(fields: [leagueId], references: [id])
  espnTeamId        Int
  name              String
  ownerUserId       String?
  proposalsFrom     TradeProposal[] @relation("ProposalsFrom")
  proposalsTo       TradeProposal[] @relation("ProposalsTo")
  TeamClaim         TeamClaim[]
  RosterSlot        RosterSlot[]

  @@unique([leagueId, espnTeamId])
}

model TeamClaim {
  id        String   @id @default(cuid())
  leagueId  String
  teamId    String
  userId    String
  claimedAt DateTime @default(now())

  // Relations
  league    League   @relation(fields: [leagueId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])

  @@unique([leagueId, teamId])
  @@unique([leagueId, userId])
}

model Player {
  id               String      @id @default(cuid())
  espnPlayerId     Int         @unique
  name             String
  posPrimary       String
  posEligibility   String[]
  teamAbbr         String?
  tradeItems       TradeItem[]
  RosterSlot       RosterSlot[]
  Projection       Projection[]
  GameLog          GameLog[]
  AuctionPrice     AuctionPrice[]
  Valuation        Valuation[]
}

model RosterSlot {
  id       String @id @default(cuid())
  teamId   String
  playerId String
  slotType String
  week     Int

  // Relations
  team     Team   @relation(fields: [teamId], references: [id])
  player   Player @relation(fields: [playerId], references: [id])
}

model Projection {
  id        String   @id @default(cuid())
  playerId  String
  week      Int
  source    String
  ptsMean   Float
  ptsP10    Float?
  ptsP90    Float?
  updatedAt DateTime @default(now())
  
  // Relations
  player    Player   @relation(fields: [playerId], references: [id])
}

model GameLog {
  id        String   @id @default(cuid())
  playerId  String
  week      Int
  statsJson Json
  ptsActual Float
  updatedAt DateTime @default(now())
  
  // Relations
  player    Player   @relation(fields: [playerId], references: [id])

  @@unique([playerId, week], name: "playerId_week")
}

model AuctionPrice {
  id        String   @id @default(cuid())
  leagueId  String
  playerId  String
  amount    Float
  source    String
  createdAt DateTime @default(now())
  
  // Relations  
  league    League   @relation(fields: [leagueId], references: [id])
  player    Player   @relation(fields: [playerId], references: [id])
}

model ReplacementBaseline {
  id           String   @id @default(cuid())
  season       Int
  pos          String
  baselineRank Int
  ptsPerGame   Float
  source       String
  updatedAt    DateTime @default(now())
  
  @@unique([season, pos])
}

model Valuation {
  id            String   @id @default(cuid())
  leagueId      String
  playerId      String
  price         Float
  components    Json
  engineVersion String
  ts            DateTime @default(now())
  
  // Relations
  league        League   @relation(fields: [leagueId], references: [id])
  player        Player   @relation(fields: [playerId], references: [id])

  @@index([leagueId, playerId, ts])
  @@index([leagueId, engineVersion])
}

model TradeProposal {
  id                    String      @id @default(cuid())
  leagueId              String
  fromTeamId            String
  toTeamId              String
  status                String      @default("draft") // draft, sent, accepted, rejected, expired
  valueDeltaFrom        Float
  valueDeltaTo          Float
  needDeltaFromBefore   Float
  needDeltaFromAfter    Float
  needDeltaToBefore     Float
  needDeltaToAfter      Float
  needDeltaFromByPos    Json        // Record<string, number>
  needDeltaToByPos      Json        // Record<string, number>
  rationale             String
  generationMode        String      // balanced | strict
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  expiresAt             DateTime?
  
  // Relations
  league                League      @relation(fields: [leagueId], references: [id])
  fromTeam              Team        @relation("ProposalsFrom", fields: [fromTeamId], references: [id])
  toTeam                Team        @relation("ProposalsTo", fields: [toTeamId], references: [id])
  items                 TradeItem[]
  shares                ProposalShare[]
}

model TradeItem {
  id           String        @id @default(cuid())
  proposalId   String
  playerId     String
  playerName   String
  position     String
  value        Float
  direction    String        // "give" | "get"
  
  // Relations
  proposal     TradeProposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  player       Player        @relation(fields: [playerId], references: [id])
}

model ProposalShare {
  id         String        @id @default(cuid())
  proposalId String
  tokenHash  String        @unique
  expiresAt  DateTime
  createdAt  DateTime      @default(now())
  
  // Relations
  proposal   TradeProposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
}

model SyncJob {
  id           String    @id @default(cuid())
  leagueId     String
  jobType      String
  status       String
  scheduledFor DateTime?
  startedAt    DateTime?
  finishedAt   DateTime?
  error        String?
}

model RateLimit {
  id          String   @id @default(cuid())
  userId      String
  routeKey    String
  windowStart DateTime
  count       Int
}
